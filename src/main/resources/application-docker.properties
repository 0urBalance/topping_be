# ========================================
# application-docker.properties (Docker containerized environment)
# ========================================

spring.application.name=topping

# Docker PostgreSQL Configuration (container-to-container communication)
spring.datasource.url=jdbc:postgresql://postgresql:5432/${DB_NAME}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration for Docker
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# HikariCP connection pool configuration for Docker
spring.datasource.hikari.minimum-idle=3
spring.datasource.hikari.maximum-pool-size=15
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.leak-detection-threshold=60000
spring.datasource.hikari.data-source-properties.prepareThreshold=0

# Logging for Docker environment
logging.level.org.balanceus.topping=INFO
logging.level.org.springframework.security=WARN
logging.level.org.springframework.web=WARN
logging.level.com.zaxxer.hikari=INFO
logging.level.org.hibernate.SQL=INFO

# Session configuration
server.servlet.session.persistent=true
server.servlet.session.timeout=30m

# SMTP Configuration
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Kakao Social Login
KAKAO.REST-API-KEY=${KAKAO_REST_API_KEY}
KAKAO.REDIRECT-URI=${KAKAO_REDIRECT_URI:http://35.231.208.65:8080/api/user/kakao/callback}

# File upload configuration for Docker
app.upload.path=${UPLOAD_PATH:/app/uploads}

# Multipart file upload configuration
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=50MB
spring.servlet.multipart.file-size-threshold=1MB
spring.servlet.multipart.location=${java.io.tmpdir}
spring.servlet.multipart.resolve-lazily=true

# Additional servlet configuration for multipart handling
server.tomcat.max-swallow-size=50MB
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true